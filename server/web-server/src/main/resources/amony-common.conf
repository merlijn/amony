amony {

  ffmpeg {
    parallelism = 4
    ffprobe-timeout = 5 seconds
  }

  media {
    index-path = ${amony.media.path}"/.amony"

    extensions = [ mp4, webm, mkv, mpeg, mpg, wmv, avi ]

    # either "move-to-trash" or "delete-file"
    delete-media = "delete-file"

    # relative (to path ^) path where uploaded files are placed
    relative-upload-path = "upload"

    fragments {
      # the default length (in milliseconds) of the generated video preview
      default-fragment-length = 3 seconds

      minimum-fragment-length = 500 milliseconds

      maximum-fragment-length = 1 minute
    }
  }

  search {

    # the default nr of results returned when no parameter is given
    default-number-of-results = 10

    # the maximum nr of results returned, otherwise a 400 response is returned
    maximum-number-of-results = 100
  }

  api {

    upload-size-limit = 5GB

    request-timeout = 10 seconds

    http {
      enabled = true
      enabled = ${?AMONY_HTTP_ENABLED}
      port = 8080
      port = ${?AMONY_HTTP_PORT}
    }

    https {
      enabled = false
      enabled = ${?AMONY_HTTPS_ENABLED}
      port = 4433
      port = ${?AMONY_HTTPS_PORT}
      private-key-pem = "/path/to/my/privkey.pem"
      certificate-chain-pem = "/path/to/my/fullchain.pem"
    }
  }
}

akka {
  actor {
    serialization-bindings {
      "nl.amony.service.auth.actor.UserEventSourcing$UserEvent" = jackson-json
      "nl.amony.service.media.actor.MediaLibEventSourcing$Event" = jackson-json
      "nl.amony.service.resources.local.DirectoryEvents$DirectoryEvent" = jackson-json
      "nl.amony.lib.akka.AtLeastOnceProcessor$Processed" = jackson-json
      "nl.amony.service.resources.local.LocalResourcesStore$LocalResourceEvent" = jackson-json
    }
  }
}